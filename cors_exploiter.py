#!/usr/bin/env python3
import requests
import argparse
import warnings
from termcolor import colored

warnings.filterwarnings("ignore", category=UserWarning)

TEST_ORIGINS = [
    "https://evil.com",
    "http://malicious.site",
    "https://notyourdomain.xyz",
]

SUSPICIOUS_HEADERS = [
    "Authorization", "Set-Cookie", "X-Api-Key", "X-Auth-Token", "Authentication", "Token", "Bearer"
]

def send_test_request(url, origin, method):
    headers = {
        "Origin": origin,
        "User-Agent": "Mozilla/5.0 (CORSExploit)",
    }

    try:
        if method == "GET":
            r = requests.get(url, headers=headers, verify=False, timeout=5)
        elif method == "POST":
            r = requests.post(url, headers=headers, data="test=data", verify=False, timeout=5)
        else:
            r = requests.options(url, headers=headers, verify=False, timeout=5)

        return r
    except Exception as e:
        print(colored(f"[!] Request error: {e}", "red"))
        return None

def analyze_response(r, origin):
    acao = r.headers.get("Access-Control-Allow-Origin", "")
    acac = r.headers.get("Access-Control-Allow-Credentials", "")
    findings = []

    if acao.strip() == origin and acac.strip().lower() == "true":
        findings.append("üî• Reflective Origin + Credentials: **VULNERABLE** to token theft")
    elif "*" in acao and acac.strip().lower() == "true":
        findings.append("‚ùó Wildcard with Credentials: Misconfig, browser will block")
    elif acao.strip() == origin:
        findings.append("‚ö†Ô∏è Reflective Origin (no credentials)")

    sensitive = [h for h in r.headers if any(x.lower() in h.lower() for x in SUSPICIOUS_HEADERS)]
    if sensitive:
        findings.append(f"üíé Sensitive headers exposed: {', '.join(sensitive)}")

    return findings

def main():
    parser = argparse.ArgumentParser(description="üåê CORS Misconfiguration Exploiter")
    parser.add_argument("url", help="Target URL (e.g., https://target.com/api/user)")
    parser.add_argument("--method", help="HTTP Method (default: GET)", default="GET", choices=["GET", "POST", "OPTIONS"])
    args = parser.parse_args()

    print(colored(f"[üéØ] Target: {args.url}", "cyan"))

    for origin in TEST_ORIGINS:
        print(colored(f"\n[üîé] Testing Origin: {origin}", "blue"))
        resp = send_test_request(args.url, origin, args.method)
        if resp:
            findings = analyze_response(resp, origin)
            if findings:
                for f in findings:
                    print(colored(f"  ‚Ü™ {f}", "green"))
            else:
                print(colored("  ‚Ü™ No exploitable behavior detected", "yellow"))
        else:
            print(colored("  ‚Ü™ Failed to get response", "red"))

if __name__ == "__main__":
    main()
